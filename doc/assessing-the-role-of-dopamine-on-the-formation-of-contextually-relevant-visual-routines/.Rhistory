xend = x[i]+.1, yend = y_mean),
color = "#FFC300", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
res <- base + geom_segment(aes(x = x[i]+.15, y = y[i],
xend = x[i]+.15, yend = predicted[i]),
color = "darkblue", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
# Generate the plot as a magick image
all <- grid.arrange(disp, pred, res, ncol = 3)
ggsave(filename=paste("prediction/y_partition_", i, ".png", sep=""), plot=all, width=30, height=10, units="cm")
}
# Generate a list of frames for the animation
frames <- lapply(1:12, generate_frame)
library(ggplot2)
library(magick)
library(gridExtra)
# Set the seed for reproducibility
set.seed(123)
# Create the data
x <- 1:12
y <- 2.7 + 0.56 * x + rnorm(12, 0, 1)
# Calculate the line of best fit
model <- lm(y ~ x)
predicted <- predict(model, data.frame(x = x))
# Create a data frame for the plot
df <- data.frame(x, y, predicted)
# Calculate the mean of y
y_mean <- mean(y)
# Create a function to generate each frame of the animation
generate_frame <- function(i) {
# Highlight the current point
df$highlight <- ifelse(df$x == i, "highlight", "regular")
# Create a base plot with the points and line of best fit
base <- ggplot(df, aes(x, y)) +
geom_point(aes(color = highlight), size = 5) +
geom_smooth(aes(y = predicted), method = "lm", color = "#FFC300", size = 1.2) +
theme_bw() +
theme(
text = element_text(size = 16),
plot.background = element_rect(fill = "#0D1F2D")
) +
geom_segment(aes(x=0, y=mean(y), xend=12, yend=mean(y)), colour="darkgrey") +
scale_color_manual(values = c("regular" = "#8F9779", "highlight" = "#FF5733")) +
theme(
legend.position = "none"
)
# Create a new plot with the highlighted point and segment
disp <- base + geom_segment(aes(x = x[i]-.1, y = y[i],
xend = x[i]-.1, yend = y_mean),
color = "#C70039", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
pred <- base + geom_segment(aes(x = x[i]+.1, y =  predicted[i],
xend = x[i]+.1, yend = y_mean),
color = "#FFC300", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
res <- base + geom_segment(aes(x = x[i]+.15, y = y[i],
xend = x[i]+.15, yend = predicted[i]),
color = "darkblue", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
# Generate the plot as a magick image
all <- grid.arrange(disp, pred, res, ncol = 3)
ggsave(filename=paste("prediction/y_partition_", i, ".png", sep=""), plot=all, width=30, height=10, units="cm")
}
# Generate a list of frames for the animation
frames <- lapply(1:12, generate_frame)
i = 1
df$highlight <- ifelse(df$x == i, "highlight", "regular")
# Create a base plot with the points and line of best fit
base <- ggplot(df, aes(x, y)) +
geom_point(aes(color = highlight), size = 5) +
geom_smooth(aes(y = predicted), method = "lm", color = "#FFC300", size = 1.2) +
theme_bw() +
theme(
text = element_text(size = 16),
plot.background = element_rect(fill = "#0D1F2D")
) +
geom_segment(aes(x=0, y=mean(y), xend=12, yend=mean(y)), colour="darkgrey") +
scale_color_manual(values = c("regular" = "#8F9779", "highlight" = "#FF5733")) +
theme(
legend.position = "none"
)
# Create a new plot with the highlighted point and segment
disp <- base + geom_segment(aes(x = x[i]-.1, y = y[i],
xend = x[i]-.1, yend = y_mean),
color = "#C70039", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
pred <- base + geom_segment(aes(x = x[i]+.1, y =  predicted[i],
xend = x[i]+.1, yend = y_mean),
color = "#FFC300", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
res <- base + geom_segment(aes(x = x[i]+.15, y = y[i],
xend = x[i]+.15, yend = predicted[i]),
color = "darkblue", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
# Generate the plot as a magick image
all <- grid.arrange(disp, pred, res, ncol = 3)
disp
disp <- base + geom_segment(aes(x = x[i]-.1, y = y[i],
xend = x[i]-.1, yend = y_mean),
color = "#C70039", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
disp
library(ggplot2)
library(magick)
library(gridExtra)
# Set the seed for reproducibility
set.seed(123)
# Create the data
x <- 1:12
y <- 2.7 + 0.56 * x + rnorm(12, 0, 1)
# Calculate the line of best fit
model <- lm(y ~ x)
predicted <- predict(model, data.frame(x = x))
# Create a data frame for the plot
df <- data.frame(x, y, predicted)
# Calculate the mean of y
y_mean <- mean(y)
# Create a function to generate each frame of the animation
generate_frame <- function(i) {
# Highlight the current point
df$highlight <- ifelse(df$x == i, "highlight", "regular")
# Create a base plot with the points and line of best fit
base <- ggplot(df, aes(x, y)) +
geom_point(aes(color = highlight), size = 5) +
geom_smooth(aes(y = predicted), method = "lm", color = "#FFC300", size = 1.2) +
theme_bw() +
theme(
text = element_text(size = 16),
plot.background = element_rect(fill = "#0D1F2D")
) +
geom_segment(aes(x=0, y=mean(y), xend=12, yend=mean(y)), colour="darkgrey") +
scale_color_manual(values = c("regular" = "#8F9779", "highlight" = "#FF5733")) +
theme(
legend.position = "none"
)
# Create a new plot with the highlighted point and segment
disp <- base + geom_segment(aes(x = x[i]-.1, y = y[i],
xend = x[i]-.1, yend = y_mean),
color = "#C70039", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
pred <- base + geom_segment(aes(x = x[i]+.1, y =  predicted[i],
xend = x[i]+.1, yend = y_mean),
color = "#FFC300", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
res <- base + geom_segment(aes(x = x[i]+.15, y = y[i],
xend = x[i]+.15, yend = predicted[i]),
color = "darkblue", size = 1,
arrow = arrow(length = unit(0.25, "cm")))
# Generate the plot as a magick image
all <- grid.arrange(disp, pred, res, ncol = 3)
ggsave(filename=paste("prediction/y_partition_", i, ".png", sep=""), plot=all, width=30, height=10, units="cm")
}
# Generate a list of frames for the animation
frames <- lapply(1:12, generate_frame)
# Combine the frames into an animated gif
frames <- list.files(path= "prediction", pattern = "y_partition_.*\\.png", full.names=TRUE)
frames_list <- lapply(frames, image_read)
frames_joined <- image_join(frames_list)
frames_animate <- image_animate(frames_joined, fps = 2)
frames_animate
frames_animate
# Combine the frames into an animated gif
frames <- list.files(path= "prediction", pattern = "y_partition_.*\\.png", full.names=TRUE)
frames_list <- lapply(frames, image_read)
frames_joined <- image_join(frames_list)
frames_animate <- image_animate(frames_joined, fps = 2)
frames_animate
magick::image_write(frames_animate, "prediction/partition_y_animate.gif")
library(knitr)
library(brms)
library(tidyverse)
# rstudio will set the folder where .Rmd file seats as work directory
# set it back to the folder where .Rproj seats
#opts_knit$set(root.dir = normalizePath("../"))
opts_chunk$set(fig.align = 'center', cache = FALSE, warning = FALSE,
message = TRUE, echo = FALSE)
options(digits = 3, width = 88, knitr.graphics.auto_pdf = TRUE,
knitr.kable.NA = '')
# knit_hooks$set(inline = function(x) {
#   x <- sprintf("%1.2f", x)
#   paste(x, collapse = ", ")
# })
taskfigpth <- '../../images/DA_ExpTask.pdf'
knitr::include_graphics(taskfigpth)
# get the number of participants who would have been excluded if we'd gone with the original criteria
load('../../data/derivatives/accuracy.Rda')
n_potential_exclude <- length(unique(door_acc_sum$sub[door_acc_sum$excl == 1]))
load('../../data/derivatives/stereo_winplusmind_dmindint/stereo_winplusmind_dmindint.Rda')
rm(mndbd_dm)
load('../../data/derivatives/acc_loo.Rda')
load('../../data/derivatives/acc_mind_loo.Rda')
load('../../data/derivatives/acc_mind_bis_comp.Rda')
load('../../data/derivatives/acc_winplusmindbdmnd/acc_winplusmindbdmnd.Rda')
acc_results <- print(mndbdrg3way, digits = 2)
## Here I grab the summary stats saved in the plotting file
load("../../data/derivatives/acc_descriptives.Rda")
overall_acc_by_drug <- mu_bdrug_pred %>% group_by(drug) %>%
summarise(mu = mean(p), ci=mean(ci)) %>%
mutate(lower = mu-ci,
upper = mu+ci)
# summarise mindfulness interaction
qs <- with(mnddrgi, quantile(m.x, c(0.25, 0.75)))
sum_dat$qs <- 0
sum_dat$qs[sum_dat$m.x < qs[1]] <- 1
sum_dat$qs[sum_dat$m.x > qs[2]] <- 2
sum_dat$qs <- as.factor(sum_dat$qs)
qs_sum <- Rmisc::summarySEwithin(data=sum_dat, measurevar="p",
withinvars=c("drug", "qs"),
idvar="sub")
qs_sum <- qs_sum %>% mutate(lower=p-ci, upper=p+ci)
# summarise block 1 vs block 8
b_dat <- Rmisc::summarySEwithin(data=sum_dat, measurevar = "p",
withinvars="b.x",
idvar="sub")
b_dat <- b_dat %>% mutate(upper=p+ci, lower=p-ci)
acc_dat_4_correlation_w_stereo <- sum_dat %>% group_by(sub) %>% summarise(mu_acc = mean(obs))
tmp <- sum_dat %>% group_by(sub, drug) %>% summarise(mu_acc = mean(obs)) %>%
group_by(sub) %>% summarise(delta = mu_acc[drug == "levodopa"] -
mu_acc[drug == "placebo"])
acc_dat_4_correlation_w_stereo <- inner_join(acc_dat_4_correlation_w_stereo, tmp)
accfigpth <- '../../images/acc_fig.pdf'
knitr::include_graphics(accfigpth)
load('../../data/derivatives/cacc_loo.Rda')
load('../../data/derivatives/cacc_mind_loo.Rda')
load('../../data/derivatives/cacc_mind_bis_comp.Rda')
load('../../data/derivatives/cacc_winplusmind/cacc_winplusmind.Rda')
cacc_results <- print(mnd, digits = 2)
## Here I grab the summary stats saved in the plotting file
load("../../data/derivatives/cacc_descriptives.Rda")
overall_acc_by_drug <- Rmisc::summarySEwithin(data=sum_dat, measurevar="p",
withinvars = "drug",
idvar = "sub")
overall_acc_by_drug <- overall_acc_by_drug %>% mutate(lower = p-ci, upper = p+ci)
# summarise block 1 vs block 8
b_dat <- Rmisc::summarySEwithin(data=sum_dat, measurevar = "p",
withinvars="b.x",
idvar="sub")
b_dat <- b_dat %>% mutate(upper=p+ci, lower=p-ci)
caccfigpth <- '../../images/cacc_fig.pdf'
knitr::include_graphics(caccfigpth)
load('../../data/derivatives/stereo_loo.Rda')
load('../../data/derivatives/stereo_mind_loo.Rda')
load('../../data/derivatives/stereo_mind_bis_loo.Rda')
load('../../data/derivatives/stereo_winplusmind_dmindint/stereo_winplusmind_dmindint.Rda')
stereo_results <- print(mndbd_dm, digits = 2)
## Here I grab the summary stats saved in the plotting file
load("../../data/derivatives/stereo_descriptives.Rda")
# summarise mindfulness interaction
qs <- with(dm, quantile(m, c(0.25, 0.75)))
sum_dat$qs <- 0
sum_dat$qs[sum_dat$m.x < qs[1]] <- 1
sum_dat$qs[sum_dat$m.x > qs[2]] <- 2
sum_dat$qs <- as.factor(sum_dat$qs)
qs_sum <- Rmisc::summarySEwithin(data=sum_dat, measurevar="pred_v",
withinvars=c("drug", "qs"),
idvar="sub")
qs_sum <- qs_sum %>% mutate(lower=pred_v-ci, upper=pred_v+ci)
# summarise block 1 vs block 8
#b_dat <- Rmisc::summarySEwithin(data=sum_dat, measurevar = "p",
#                                withinvars="b.x",
#                                idvar="sub")
#b_dat <- b_dat %>% mutate(upper=p+ci, lower=p-ci)
stereo_dat_4_correlation_w_acc <- sum_dat %>% group_by(sub) %>% summarise(mu_v = mean(v), m = m.x[1], qs = qs[1])
tmp <- sum_dat %>% group_by(sub, drug) %>% summarise(mu_v = mean(v)) %>%
group_by(sub) %>% summarise(delta_v = mu_v[drug == "levodopa"] -
mu_v[drug == "placebo"])
stereo_dat_4_correlation_w_acc <- inner_join(stereo_dat_4_correlation_w_acc, tmp)
stereofigpth <- '../../images/s_fig.pdf'
knitr::include_graphics(stereofigpth)
# use this code chunk to correlate variance with overall accuracy
df <- inner_join(acc_dat_4_correlation_w_stereo, stereo_dat_4_correlation_w_acc, by = "sub")
cor_results <- with(df, cor.test())
df
cor_results <- with(df, cor.test(mu_acc, mu_v))
load('../../data/derivatives/stereo_winplusmindplusacc_dmindint/stereo_winplusmindplusacc_dmindint.Rda')
cor_results
cor_results$parameter
cor_results$estimate
cor_results$p.value
(sprintf("%d", cor_df))
cor_cor
# use this code chunk to correlate variance with overall accuracy
df <- inner_join(acc_dat_4_correlation_w_stereo, stereo_dat_4_correlation_w_acc, by = "sub")
cor_results <- with(df, cor.test(mu_acc, mu_v))
cor_df <- cor_results$parameter
cor_cor <- cor_results$estimate
cor_p <- cor_results$p.value
load('../../data/derivatives/stereo_winplusmindplusacc_dmindint/stereo_winplusmindplusacc_dmindint.Rda')
cor_cor
cor_p
sprintf("%e", cor_p)
sprintf("%1.2e", cor_p)
stereo_w_acc_mod_comp <- loo_compare(mndbd_dm, mndbdacc_dm)
stereo_w_acc_mod_comp
mndbdacc_dm
print(stereo_w_acc_mod_comp["mndbd_dm", digits = 2)
print(stereo_w_acc_mod_comp, digits = 2)
print(mndbdacc_dm, digits = 2)
stereo_update_results <-  print(mndbdacc_dm, digits = 2)
.5*.5
dbinom(2, 2, p=.5)
dbinom(1, 2, p=.5)
dbinom(0, 2, p=.5)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
# get the data
load("../data/predicted_error_by_task.RData")
get_cv_dat <- function(dat){
out <- data.frame(mu=dat$cv$results$Rsquared,
sd=dat$cv$results$RsquaredSD)
}
CV_vars <- do.call(rbind, lapply(names(predictions_all_tasks),
function(x) get_cv_dat(predictions_all_tasks[[x]])))
rownames(CV_vars) <- names(predictions_all_tasks)
# get the adjusted R^2 for the skew regressions
get_adj_R <- function(dat){
tmp = summary(dat)
tmp$adj.r.squared
}
skewR2 <- do.call(rbind, lapply(c("AB", "SRT", "SD_ME", "SD_int"),
function(x) get_adj_R(predictions_all_tasks[[x]]$skew)))
rownames(skewR2) <- c("AB", "SRT", "SD_ME", "SD_int")
kurR2 <- do.call(rbind, lapply(c("AB", "SRT", "SD_ME", "SD_int"),
function(x) get_adj_R(predictions_all_tasks[[x]]$k)))
rownames(kurR2) <- c("AB", "SRT", "SD_ME", "SD_int")
skewR2
CV_vars
predictions_all_tasks
predictions_all_tasks[[1]]
library(tidyverse)
cs <- c(1, 5, 10) # exploration scalars
Ntas <- c(1, 2, 6) # n times actions selected
t <- rep(c(1:10), times = length(cs)*length(Ntas)) # t
t
c <- rep(cs, each = length(t)/3)
Ntas
Nta
c
Nta <- rep(Ntas, each = 3, times = max(t))
Nta
Nta <- rep(Ntas, each = max(t), times = 3)
Nta
ucb <- c*sqrt(ln(t)/Nta)
ucb <- c*sqrt(log(t)/Nta)
dat <- data.frame(cs = cs,
t = t,
Nta = Nta,
ucb = ucb)
dat <- dat %>% ggplot(aes(x=t, y=ucb, colour=Nta, group=Nta)) +
geom_line() +
facet_wrap(~group)
library(tidyverse)
cs <- c(1, 5, 10) # exploration scalars
Ntas <- c(1, 2, 6) # n times actions selected
t <- rep(c(1:10), times = length(cs)*length(Ntas)) # t
c <- rep(cs, each = length(t)/3)
Nta <- rep(Ntas, each = max(t), times = 3)
ucb <- c*sqrt(log(t)/Nta)
dat <- data.frame(cs = cs,
t = t,
Nta = Nta,
ucb = ucb)
dat %>% ggplot(aes(x=t, y=ucb, colour=Nta, group=Nta)) +
geom_line() +
facet_wrap(~group)
dat %>% ggplot(aes(x=t, y=ucb, colour=Nta, group=Nta)) +
geom_line() +
facet_wrap(~cs)
dat %>% ggplot(aes(x=t, y=ucb, colour=as.factor(Nta), group=as.factor(Nta))) +
geom_line() +
facet_wrap(~cs)
cs <- c(1, 5, 10) # exploration scalars
Ntas <- c(1, 2, 6) # n times actions selected
t <- rep(c(11:20), times = length(cs)*length(Ntas)) # t
c <- rep(cs, each = length(t)/3)
Nta <- rep(Ntas, each = max(t), times = 3)
ucb <- c*sqrt(log(t)/Nta)
dat <- data.frame(cs = cs,
t = t,
Nta = Nta,
ucb = ucb)
dat %>% ggplot(aes(x=t, y=ucb, colour=as.factor(Nta), group=as.factor(Nta))) +
geom_line() +
facet_wrap(~cs)
dat %>% filter(cs == 1) %>% ggplot(aes(x=t, y=ucb, colour=as.factor(Nta),
group=as.factor(Nta))) +
geom_line()
View(dat)
cs <- c(1, 5, 10) # exploration scalars
Ntas <- c(1, 2, 6) # n times actions selected
t <- rep(c(11:20), times = length(cs)*length(Ntas)) # t
c <- rep(cs, each = length(t)/3)
Nta <- rep(Ntas, each = max(t), times = 3)
ucb <- c*sqrt(log(t)/Nta)
dat <- data.frame(cs = c,
t = t,
Nta = Nta,
ucb = ucb)
dat %>% filter(cs == 1) %>% ggplot(aes(x=t, y=ucb, colour=as.factor(Nta),
group=as.factor(Nta)))
head(dat)
dat %>% filter(cs == 1)
dat %>% filter(cs == 1) %>% ggplot(aes(x=t, y=ucb, colour=as.factor(Nta),
group=as.factor(Nta)))
dat  %>% ggplot(aes(x=t, y=ucb, colour=as.factor(Nta),
group=as.factor(Nta))) +
geom_line() +
facet_wrap(~cs)
dat  %>% ggplot(aes(x=t, y=ucb, colour=as.factor(Nta),
group=as.factor(Nta))) +
geom_line() +
facet_wrap(~as.factor(cs))
load('../../data/derivatives/stereo_winplusmind_dmindint/stereo_winplusmind_dmindint.Rda')
rm(mndbd_dm)
load('../../data/derivatives/acc_loo.Rda')
load('../../data/derivatives/acc_mind_loo.Rda')
load('../../data/derivatives/acc_mind_bis_comp.Rda')
load('../../data/derivatives/acc_winplusmindbmnd_dmnd/acc_winplusmindbmnd_dmnd.Rda')
acc_results <- print(mndbdrg3way, digits = 2)
load('../../data/derivatives/acc_loo.Rda')
load('../../data/derivatives/acc_mind_loo.Rda')
load('../../data/derivatives/acc_mind_bis_comp.Rda')
load('../../data/derivatives/acc_winplusmindbmnd_dmnd/acc_winplusmindbmnd_dmnd.Rda')
acc_results <- print(mndbdrgb, digits = 2)
load('../../data/derivatives/acc_loo.Rda')
load('../../data/derivatives/acc_mind_loo.Rda')
load('../../data/derivatives/acc_mind_bis_comp.Rda')
load('../../data/derivatives/acc_winplusmindbmnd_dmnd/acc_winplusmindbmnd_dmnd.Rda')
acc_results <- print(mnddrgb, digits = 2)
mnddrgb
acc_comp
## Here I grab the summary stats saved in the plotting file
load("../../data/derivatives/cacc_descriptives.Rda")
overall_acc_by_drug <- Rmisc::summarySEwithin(data=sum_dat, measurevar="p",
withinvars = "drug",
idvar = "sub")
overall_acc_by_drug <- overall_acc_by_drug %>% mutate(lower = p-ci, upper = p+ci)
library(knitr)
library(brms)
library(tidyverse)
# rstudio will set the folder where .Rmd file seats as work directory
# set it back to the folder where .Rproj seats
#opts_knit$set(root.dir = normalizePath("../"))
opts_chunk$set(fig.align = 'center', cache = FALSE, warning = FALSE,
message = TRUE, echo = FALSE)
options(digits = 3, width = 88, knitr.graphics.auto_pdf = TRUE,
knitr.kable.NA = '')
# knit_hooks$set(inline = function(x) {
#   x <- sprintf("%1.2f", x)
#   paste(x, collapse = ", ")
# })
taskfigpth <- '../../images/DA_ExpTask.pdf'
knitr::include_graphics(taskfigpth)
# get the number of participants who would have been excluded if we'd gone with the original criteria
load('../../data/derivatives/accuracy.Rda')
n_potential_exclude <- length(unique(door_acc_sum$sub[door_acc_sum$excl == 1]))
load('../../data/derivatives/stereo_winplusmind_dmindint/stereo_winplusmind_dmindint.Rda')
rm(mndbd_dm)
load('../../data/derivatives/acc_loo.Rda')
load('../../data/derivatives/acc_mind_loo.Rda')
load('../../data/derivatives/acc_mind_bis_comp.Rda')
load('../../data/derivatives/acc_winplusmindbmnd_dmnd/acc_winplusmindbmnd_dmnd.Rda')
acc_results <- print(mnddrgb, digits = 2)
# note: filename of winning da + block model = acc_model-fxbdrgint-brgrfx
## Here I grab the summary stats saved in the plotting file
load("../../data/derivatives/acc_descriptives.Rda")
overall_acc_by_drug <- mu_bdrug_pred %>% group_by(drug) %>%
summarise(mu = mean(p), ci=mean(ci)) %>%
mutate(lower = mu-ci,
upper = mu+ci)
# summarise mindfulness interaction
qs <- with(mnddrgi, quantile(m.x, c(0.25, 0.75)))
sum_dat$qs <- 0
sum_dat$qs[sum_dat$m.x < qs[1]] <- 1
sum_dat$qs[sum_dat$m.x > qs[2]] <- 2
sum_dat$qs <- as.factor(sum_dat$qs)
qs_sum <- Rmisc::summarySEwithin(data=sum_dat, measurevar="p",
withinvars=c("drug", "qs"),
idvar="sub")
qs_sum <- qs_sum %>% mutate(lower=p-ci, upper=p+ci)
# summarise block 1 vs block 8
b_dat <- Rmisc::summarySEwithin(data=sum_dat, measurevar = "p",
withinvars="b.x",
idvar="sub")
b_dat <- b_dat %>% mutate(upper=p+ci, lower=p-ci)
acc_dat_4_correlation_w_stereo <- sum_dat %>% group_by(sub) %>% summarise(mu_acc = mean(obs))
tmp <- sum_dat %>% group_by(sub, drug) %>% summarise(mu_acc = mean(obs)) %>%
group_by(sub) %>% summarise(delta = mu_acc[drug == "levodopa"] -
mu_acc[drug == "placebo"])
acc_dat_4_correlation_w_stereo <- inner_join(acc_dat_4_correlation_w_stereo, tmp)
load('../../data/derivatives/cacc_loo.Rda')
load('../../data/derivatives/cacc_mind_loo.Rda')
load('../../data/derivatives/cacc_mind_bis_comp.Rda')
load('../../data/derivatives/cacc_winplusmind/cacc_winplusmind.Rda')
cacc_results <- print(mnd, digits = 2)
## Here I grab the summary stats saved in the plotting file
load("../../data/derivatives/cacc_descriptives.Rda")
overall_acc_by_drug <- Rmisc::summarySEwithin(data=sum_dat, measurevar="p",
withinvars = "drug",
idvar = "sub")
overall_acc_by_drug <- overall_acc_by_drug %>% mutate(lower = p-ci, upper = p+ci)
# summarise block 1 vs block 8
b_dat <- Rmisc::summarySEwithin(data=sum_dat, measurevar = "p",
withinvars="b.x",
idvar="sub")
b_dat <- b_dat %>% mutate(upper=p+ci, lower=p-ci)
knit_with_parameters("~/Documents/projects/DA_VisRoutes/doc/assessing-the-role-of-dopamine-on-the-formation-of-contextually-relevant-visual-routines/assessing-the-role-of-dopamine-on-the-formation-of-contextually-relevant-visual-routines.Rmd")
unlink("Documents/projects/DA_VisRoutes/doc/assessing-the-role-of-dopamine-on-the-formation-of-contextually-relevant-visual-routines/assessing-the-role-of-dopamine-on-the-formation-of-contextually-relevant-visual-routines_cache", recursive = TRUE)
setwd("~/Documents/projects/DA_VisRoutes/doc/assessing-the-role-of-dopamine-on-the-formation-of-contextually-relevant-visual-routines")
library(brms)
library(knitr)
library(tidyverse)
